trigger: none

lockBehavior: runLatest

variables:
- template: variables.yaml

resources:
  pipelines:
  - pipeline: M365Automation
    source: 'Build MOF'
    branch: main
    trigger:
      branches:
        include:
        - main

pool:
  vmImage: windows-latest

stages:
- ${{ each env in split(variables.Environments, ',')}}:
  - stage: M365DSCDeployment_${{ env }}
    displayName: "Microsoft365DSC deployment for environment '${{ env }}'"
    dependsOn: []
    jobs:
    - deployment: Deploy_${{ env }}
      displayName: "Deploy ${{ env }}"
      dependsOn: []
      environment: ${{ env }}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              clean: true
              fetchDepth: 1
              persistCredentials: true

            - task: CmdLine@2
              displayName: 'Configure WinRM'
              inputs:
                script: |
                  @echo on
                  call winrm invoke restore winrm/config
                  call winrm quickconfig -quiet
                  call winrm set winrm/config @{MaxEnvelopeSizekb="4096"} > null
                  call winrm get winrm/config | find /i "MaxEnvelopeSizekb"

            - task: AzurePowerShell@5
              displayName: 'Download secrets'
              inputs:
                ScriptType: 'FilePath'
                ScriptPath: './DownloadSecrets.ps1'
                ScriptArguments: '-KeyVault "${{ variables.keyVault }}" -Environment "${{ env }}"'
                azurePowerShellVersion: 'latestVersion'
                azureSubscription: '${{ variables.azureSubscription }}'
                errorActionPreference: 'Stop'
                FailOnStandardError: true

            - task: AzurePowerShell@5
              displayName: 'Prepare modules'
              inputs:
                ScriptType: 'FilePath'
                ScriptPath: './DeployModules.ps1'
                ScriptArguments: '-PackageSourceLocation "${{ variables.packageSourceLocation }}" -PATToken "$(patToken)" -BlobResourceGroup "${{ variables.blobResourceGroup }}" -BlobStorageAccount "${{ variables.blobStorageAccount }}" -BlobContainer "${{ variables.blobContainer }}"'
                azurePowerShellVersion: 'latestVersion'
                azureSubscription: '${{ variables.azureSubscription }}'
                errorActionPreference: 'Stop'
                FailOnStandardError: false

            - task: PowerShell@2
              displayName: 'Deploy resources'
              inputs:
                targetType: 'filePath'
                filePath: '$(Pipeline.Workspace)/M365Automation/${{ variables.buildArtifactName }}/Deploy.ps1'
                arguments: '-Environment "${{ env }}"'
                errorActionPreference: 'Stop'
                failOnStderr: true
                workingDirectory: '$(Pipeline.Workspace)/M365Automation/${{ variables.buildArtifactName }}'
